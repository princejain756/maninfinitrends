generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  name      String?
  password  String?   // hashed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  sessions  Session[]
  carts     Cart[]
  orders    Order[]
  addresses Address[]
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.Uuid
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  cart       Cart[]
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  ProductCategory[]
}

model Product {
  id          String            @id @default(uuid()) @db.Uuid
  slug        String            @unique
  title       String
  description String?
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  variants    ProductVariant[]
  images      ProductImage[]
  categories  ProductCategory[]
}

model ProductVariant {
  id                 String    @id @default(uuid()) @db.Uuid
  product            Product   @relation(fields: [productId], references: [id])
  productId          String    @db.Uuid
  sku                String    @unique
  name               String
  priceCents         Int
  currency           String    @default("INR")
  attributes         Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  inventory          Inventory?
  cartItems          CartItem[]
  orderItems         OrderItem[]
}

model ProductImage {
  id        String  @id @default(uuid()) @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.Uuid
  url       String
  alt       String?
  position  Int     @default(0)
}

model ProductCategory {
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String  @db.Uuid

  @@id([productId, categoryId])
}

model Inventory {
  id         String         @id @default(uuid()) @db.Uuid
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  String         @unique @db.Uuid
  quantity   Int            @default(0)
  // Optional: reserved quantity for holds
  reserved   Int            @default(0)
  updatedAt  DateTime       @updatedAt
}

model Cart {
  id         String     @id @default(uuid()) @db.Uuid
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?    @db.Uuid
  session    Session?   @relation(fields: [sessionId], references: [id])
  sessionId  String?    @db.Uuid
  status     CartStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  items      CartItem[]
}

model CartItem {
  id          String         @id @default(uuid()) @db.Uuid
  cart        Cart           @relation(fields: [cartId], references: [id])
  cartId      String         @db.Uuid
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   String         @db.Uuid
  quantity    Int            @default(1)
  unitPrice   Int            // copy of variant price at add time, in cents
  currency    String         @default("INR")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([cartId, variantId])
}

model Order {
  id          String       @id @default(uuid()) @db.Uuid
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.Uuid
  status      OrderStatus  @default(PENDING)
  totalCents  Int          @default(0)
  currency    String       @default("INR")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  items       OrderItem[]
  payments    Payment[]
  shipping    Address?
  billing     Address?
}

model OrderItem {
  id          String         @id @default(uuid()) @db.Uuid
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     String         @db.Uuid
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   String         @db.Uuid
  quantity    Int            @default(1)
  unitPrice   Int
  currency    String         @default("INR")
}

model Payment {
  id               String      @id @default(uuid()) @db.Uuid
  order            Order       @relation(fields: [orderId], references: [id])
  orderId          String      @db.Uuid
  provider         String
  providerPaymentId String
  status           PaymentStatus @default(PENDING)
  amountCents      Int
  currency         String      @default("INR")
  createdAt        DateTime    @default(now())
}

model Address {
  id         String  @id @default(uuid()) @db.Uuid
  user       User?   @relation(fields: [userId], references: [id])
  userId     String? @db.Uuid
  order      Order?  @relation(fields: [orderId], references: [id])
  orderId    String? @db.Uuid
  name       String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String  @default("IN")
  phone      String?
}

enum CartStatus {
  ACTIVE
  MERGED
  ORDERED
  ABANDONED
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

